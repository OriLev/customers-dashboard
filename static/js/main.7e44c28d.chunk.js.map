{"version":3,"sources":["components/CustomersTable/CustomerRow.js","components/CustomersTable/CustomersTable.js","components/CustomerDetails/CustomerDetails.js","components/Layout/Header.js","components/Layout/Main.js","api.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ToggleCell","isActive","toggleUserActive","className","type","checked","onChange","DataCell","content","CustomerRow","customer","history","name","company","address","_id","digestValue","onDoubleClick","ev","id","target","push","goToCustomer","first","last","split","slice","join","CustomersTable","customers","isLoading","map","key","Detail","detailName","detail","CustomerDetails","getCustomerById","match","params","toggleActive","balance","picture","age","eyeColor","email","phone","about","src","alt","onClick","Header","activeUsers","Main","children","getCustomers","a","axios","get","response","data","Promise","all","getDigestValue","digestValues","customersWithDigestValue","index","Digest","App","useState","setCustomers","setIsLoading","useEffect","fetchCustomers","getCustomerIndexById","findIndex","idx","updatedCustomers","filter","length","exact","from","to","path","render","props","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e44c28d.chunk.js","sourcesContent":["import React from 'react'\n// import React, { useEffect, useState, useRef } from 'react';\n\n// import { getDigestValue } from '../api';\n\nconst ToggleCell = ({ isActive, toggleUserActive }) => {\n  return (\n    <td className=\"toggleCell\">\n      <input\n        type=\"checkbox\"\n        checked={isActive ? true : false}\n        onChange={toggleUserActive}\n      />\n    </td>\n  );\n};\nconst DataCell = ({ content }) => {\n  return <td>{content}</td>;\n};\n\nexport default function CustomerRow({ customer, toggleUserActive, history }) {\n  \n  const goToCustomer = (ev, id) => {\n    if (isActive && ev.target.type !== 'checkbox')\n      return history.push(`/customer/${id}`);\n  };\n  \n  // Option 1: Using digestValue set on the state\n  \n  const { isActive, name, company, address, _id, digestValue } = customer;\n  \n  // Option 2: Fetching digest value on every \n\n  // const { isActive, name, company, address, _id } = customer;\n  // const [isPending, setIsPending] = useState(true);\n  // const digestValue = useRef();\n  // useEffect(() => {\n  //   async function fetchDigestValue() {\n  //     digestValue.current = await getDigestValue(name.first, name.last);\n  //     setIsPending(false);\n  //   }\n  //   fetchDigestValue();\n  // }, [name]);\n  \n  return (\n    <tr className={`${!isActive && 'disabled'}`} onDoubleClick={ev => isActive ? goToCustomer(ev, _id) : null}>\n      <ToggleCell isActive={isActive} toggleUserActive={toggleUserActive} />\n      <DataCell content={name.first + ' ' + name.last} />\n      <DataCell content={company} />\n      <DataCell content={address.split(', ').slice(1, 3).join(', ')} />\n      <DataCell content={digestValue}/>\n      {/* <DataCell content={isPending ? 'Pending...' : digestValue.current} /> */}\n    </tr>\n  );\n}\n","import React from 'react';\nimport CustomerRow from './CustomerRow';\n\nimport './styles.css';\n\nexport const CustomersTable = ({\n  customers,\n  toggleUserActive,\n  isLoading,\n  history,\n}) => {\n  return !isLoading ? (\n      <table>\n        <thead>\n          <tr>\n            <th>Active</th>\n            <th>Full Name</th>\n            <th>Company</th>\n            <th>Location</th>\n            <th>Digest Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {customers.map(customer => {\n            const { _id } = customer;\n            return (\n              <CustomerRow\n                key={_id}\n                history={history}\n                customer={customer}\n                toggleUserActive={toggleUserActive(_id)}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n  ) : (\n    <p>Loading...</p>\n  );\n};\n","import React from 'react';\nimport './styles.css';\n\nconst Detail = ({ detailName, detail }) => (\n  <span className=\"singleDetail\">\n    <strong>{detailName}:</strong>&nbsp;<p>{detail}</p>\n  </span>\n);\n\nexport const CustomerDetails = ({\n  getCustomerById,\n  toggleUserActive,\n  match,\n  isLoading,\n}) => {\n  if (isLoading) return <p>Loading...</p>;\n\n  const { id } = match.params;\n  const toggleActive = toggleUserActive(id);\n  const customer = getCustomerById(id);\n  const {\n    name,\n    balance,\n    picture,\n    age,\n    eyeColor,\n    company,\n    email,\n    phone,\n    address,\n    about,\n    isActive,\n  } = customer;\n  return (\n    <>\n      <div className=\"customerDetails\">\n        <h2 className=\"customerName\">\n          {name.first + ' ' + name.last} &nbsp;\n          <span className={`userStatus ${isActive ? 'active' : 'inactive'}`}>({isActive ? 'Active user' : 'Inactive user'})</span>\n        </h2>\n        <img className=\"customerImage\" src={picture} alt={name.first + ' ' + name.last} />\n        <Detail detailName=\"Balance\" detail={balance} />\n        <Detail detailName=\"Age\" detail={age} />\n        <Detail detailName=\"Eye Color\" detail={eyeColor} />\n        <Detail detailName=\"Company\" detail={company} />\n        <Detail detailName=\"Email\" detail={email} />\n        <Detail detailName=\"Phone\" detail={phone} />\n        <Detail detailName=\"Address\" detail={address} />\n        <Detail detailName=\"About\" detail={about} />\n      </div>\n      <button className=\"activationToggle\" onClick={() => toggleActive()}>\n        {!customer.isActive ? 'Activate user' : 'Deactivate user'}\n      </button>\n    </>\n  );\n};\n","import React from 'react';\nimport './styles.css';\n\nexport const Header = ({ activeUsers }) => (\n  <header className=\"appHeader\">\n    <h1>\n      User Management <span> [{activeUsers} active users]</span>\n    </h1>\n  </header>\n);\n","import React from 'react';\n\nexport const Main = ({ children }) => <main>{children}</main>;\n","import axios from 'axios';\n\nexport async function getCustomers() {\n  const response = await axios.get(\n    'https://run.mocky.io/v3/93a7ac54-14e7-43a0-8a8d-8e3821cf74d0'\n  );\n  const customers = response.data;\n  const digestValues = await Promise.all(\n    customers.map(customer => {\n      const { name } = customer;\n      return getDigestValue(name.first, name.last);\n    })\n  );\n  const customersWithDigestValue = customers.map((customer, index) => ({ ...customer, digestValue: digestValues[index] }));\n  return customersWithDigestValue;\n}\n\nexport async function getDigestValue(first, last) {\n  const response = await axios.get(\n    `https://api.hashify.net/hash/md4/hex?value=${first + last}`\n  );\n  return response.data.Digest;\n}\n\n// export async function getCustomers() {\n//   const response = await axios.get(\n//     'https://run.mocky.io/v3/93a7ac54-14e7-43a0-8a8d-8e3821cf74d0'\n//   );\n//   const customers = response.data;\n//   return customers;\n// }\n","import React, { useState, useEffect } from 'react';\nimport { CustomersTable } from '../CustomersTable/CustomersTable';\nimport { CustomerDetails } from '../CustomerDetails/CustomerDetails';\nimport { Header, Main } from '../Layout';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport { getCustomers } from '../../api.js';\n\nexport function App() {\n  const [customers, setCustomers] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function fetchCustomers() {\n      const customers = await getCustomers();\n      setCustomers(customers);\n      setIsLoading(false);\n    }\n    fetchCustomers();\n  }, []);\n\n  const getCustomerIndexById = id =>\n    customers.findIndex(customer => customer._id === id);\n  const getCustomerById = id => {\n    const customer = customers[getCustomerIndexById(id)];\n    return customer;\n  };\n  const toggleUserActive = id => () => {\n    const idx = getCustomerIndexById(id);\n    const updatedCustomers = [...customers];\n    updatedCustomers[idx].isActive = !customers[idx].isActive;\n    setCustomers(updatedCustomers);\n  };\n\n  const getActiveCustomersCount = () => {\n    return customers.filter(customer => customer.isActive).length;\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header activeUsers={getActiveCustomersCount()} />\n        <Main>\n          <Switch>\n            <Redirect exact from=\"/\" to=\"/customers\" />\n            <Route\n              exact\n              path=\"/customers\"\n              render={props => (\n                <CustomersTable\n                  {...props}\n                  customers={customers}\n                  toggleUserActive={toggleUserActive}\n                  isLoading={isLoading}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/customer/:id\"\n              render={props => (\n                <CustomerDetails\n                  {...props}\n                  getCustomerById={getCustomerById}\n                  toggleUserActive={toggleUserActive}\n                  isLoading={isLoading}\n                />\n              )}\n            />\n          </Switch>\n        </Main>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}